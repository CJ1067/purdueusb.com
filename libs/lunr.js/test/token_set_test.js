suite("lunr.TokenSet",function(){suite("#toString",function(){test("includes node finality",function(){var t=new lunr.TokenSet,r=new lunr.TokenSet,e=new lunr.TokenSet;r.final=!0,e.final=!0,assert.notEqual(t.toString(),r.toString()),assert.equal(e.toString(),r.toString())}),test("includes all edges",function(){var t=new lunr.TokenSet,r=new lunr.TokenSet,e=new lunr.TokenSet;r.edges.a=1,e.edges.a=1,e.edges.b=1,assert.notEqual(t.toString(),r.toString()),assert.notEqual(e.toString(),r.toString()),assert.notEqual(e.toString(),t.toString())}),test("includes edge id",function(){var t=new lunr.TokenSet,r=new lunr.TokenSet,e=new lunr.TokenSet,n=new lunr.TokenSet,a=new lunr.TokenSet;e.edges.a=t,n.edges.a=r,a.edges.a=r,assert.equal(n.toString(),a.toString()),assert.notEqual(e.toString(),a.toString()),assert.notEqual(e.toString(),n.toString())})}),suite(".fromString",function(){test("without wildcard",function(){lunr.TokenSet._nextId=1;var t=lunr.TokenSet.fromString("a");assert.equal(t.toString(),"0a2"),assert.isOk(t.edges.a.final)}),test("with trailing wildcard",function(){var t=lunr.TokenSet.fromString("a*").edges.a.edges["*"];assert.equal(t,t.edges["*"]),assert.isOk(t.final)})}),suite(".fromArray",function(){test("with unsorted array",function(){assert.throws(function(){lunr.TokenSet.fromArray(["z","a"])})}),test("with sorted array",function(){var t=lunr.TokenSet.fromArray(["a","z"]);assert.deepEqual(["a","z"],t.toArray().sort())}),test("is minimal",function(){var t=lunr.TokenSet.fromArray(["ac","dc"]),r=t.edges.a.edges.c,e=t.edges.d.edges.c;assert.deepEqual(r,e)})}),suite("#toArray",function(){test("includes all words",function(){var t=["bat","cat"],r=lunr.TokenSet.fromArray(t);assert.sameMembers(t,r.toArray())}),test("includes single words",function(){var t="bat",r=lunr.TokenSet.fromString(t);assert.sameMembers([t],r.toArray())})}),suite("#intersect",function(){test("no intersection",function(){var t=lunr.TokenSet.fromString("cat"),r=lunr.TokenSet.fromString("bar"),e=t.intersect(r);assert.equal(0,e.toArray().length)}),test("simple intersection",function(){var t=lunr.TokenSet.fromString("cat"),r=lunr.TokenSet.fromString("cat"),e=t.intersect(r);assert.sameMembers(["cat"],e.toArray())}),test("trailing wildcard intersection",function(){var t=lunr.TokenSet.fromString("cat"),r=lunr.TokenSet.fromString("c*"),e=t.intersect(r);assert.sameMembers(["cat"],e.toArray())}),test("trailing wildcard no intersection",function(){var t=lunr.TokenSet.fromString("cat"),r=lunr.TokenSet.fromString("b*"),e=t.intersect(r);assert.equal(0,e.toArray().length)}),test("leading wildcard intersection",function(){var t=lunr.TokenSet.fromString("cat"),r=lunr.TokenSet.fromString("*t"),e=t.intersect(r);assert.sameMembers(["cat"],e.toArray())}),test("leading wildcard backtracking intersection",function(){var t=lunr.TokenSet.fromString("aaacbab"),r=lunr.TokenSet.fromString("*ab"),e=t.intersect(r);assert.sameMembers(["aaacbab"],e.toArray())}),test("leading wildcard no intersection",function(){var t=lunr.TokenSet.fromString("cat"),r=lunr.TokenSet.fromString("*r"),e=t.intersect(r);assert.equal(0,e.toArray().length)}),test("leading wildcard backtracking no intersection",function(){var t=lunr.TokenSet.fromString("aaabdcbc"),r=lunr.TokenSet.fromString("*abc"),e=t.intersect(r);assert.equal(0,e.toArray().length)}),test("contained wildcard intersection",function(){var t=lunr.TokenSet.fromString("foo"),r=lunr.TokenSet.fromString("f*o"),e=t.intersect(r);assert.sameMembers(["foo"],e.toArray())}),test("contained wildcard backtracking intersection",function(){var t=lunr.TokenSet.fromString("ababc"),r=lunr.TokenSet.fromString("a*bc"),e=t.intersect(r);assert.sameMembers(["ababc"],e.toArray())}),test("contained wildcard no intersection",function(){var t=lunr.TokenSet.fromString("foo"),r=lunr.TokenSet.fromString("b*r"),e=t.intersect(r);assert.equal(0,e.toArray().length)}),test("contained wildcard backtracking no intersection",function(){var t=lunr.TokenSet.fromString("ababc"),r=lunr.TokenSet.fromString("a*ac"),e=t.intersect(r);assert.equal(0,e.toArray().length)}),test("wildcard matches zero or more characters",function(){var t=lunr.TokenSet.fromString("foo"),r=lunr.TokenSet.fromString("foo*"),e=t.intersect(r);assert.sameMembers(["foo"],e.toArray())}),test("catastrophic backtracking with leading characters",function(){var t=lunr.TokenSet.fromString("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),r=lunr.TokenSet.fromString("*ff"),e=t.intersect(r);assert.equal(1,e.toArray().length)}),test("leading and trailing backtracking intersection",function(){var t=lunr.TokenSet.fromString("acbaabab"),r=lunr.TokenSet.fromString("*ab*"),e=t.intersect(r);assert.sameMembers(["acbaabab"],e.toArray())}),test("multiple contained wildcard backtracking",function(){var t=lunr.TokenSet.fromString("acbaabab"),r=lunr.TokenSet.fromString("a*ba*b"),e=t.intersect(r);assert.sameMembers(["acbaabab"],e.toArray())}),test("intersect with fuzzy string substitution",function(){var t=lunr.TokenSet.fromString("bar"),r=lunr.TokenSet.fromString("cur"),e=lunr.TokenSet.fromString("cat"),n=lunr.TokenSet.fromString("car"),a=lunr.TokenSet.fromString("foo"),o=lunr.TokenSet.fromFuzzyString("car",1);assert.sameMembers(t.intersect(o).toArray(),["bar"]),assert.sameMembers(r.intersect(o).toArray(),["cur"]),assert.sameMembers(e.intersect(o).toArray(),["cat"]),assert.sameMembers(n.intersect(o).toArray(),["car"]),assert.equal(a.intersect(o).toArray().length,0)}),test("intersect with fuzzy string deletion",function(){var t=lunr.TokenSet.fromString("ar"),r=lunr.TokenSet.fromString("br"),e=lunr.TokenSet.fromString("ba"),n=lunr.TokenSet.fromString("bar"),a=lunr.TokenSet.fromString("foo"),o=lunr.TokenSet.fromFuzzyString("bar",1);assert.sameMembers(t.intersect(o).toArray(),["ar"]),assert.sameMembers(r.intersect(o).toArray(),["br"]),assert.sameMembers(e.intersect(o).toArray(),["ba"]),assert.sameMembers(n.intersect(o).toArray(),["bar"]),assert.equal(a.intersect(o).toArray().length,0)}),test("intersect with fuzzy string insertion",function(){var t=lunr.TokenSet.fromString("bbar"),r=lunr.TokenSet.fromString("baar"),e=lunr.TokenSet.fromString("barr"),n=lunr.TokenSet.fromString("bar"),a=lunr.TokenSet.fromString("ba"),o=lunr.TokenSet.fromString("foo"),s=lunr.TokenSet.fromString("bara"),i=lunr.TokenSet.fromFuzzyString("bar",1);assert.sameMembers(t.intersect(i).toArray(),["bbar"]),assert.sameMembers(r.intersect(i).toArray(),["baar"]),assert.sameMembers(e.intersect(i).toArray(),["barr"]),assert.sameMembers(n.intersect(i).toArray(),["bar"]),assert.sameMembers(a.intersect(i).toArray(),["ba"]),assert.equal(o.intersect(i).toArray().length,0),assert.sameMembers(s.intersect(i).toArray(),["bara"])}),test("intersect with fuzzy string transpose",function(){var t=lunr.TokenSet.fromString("abr"),r=lunr.TokenSet.fromString("bra"),e=lunr.TokenSet.fromString("foo"),n=lunr.TokenSet.fromFuzzyString("bar",1);assert.sameMembers(t.intersect(n).toArray(),["abr"]),assert.sameMembers(r.intersect(n).toArray(),["bra"]),assert.equal(e.intersect(n).toArray().length,0)}),test("fuzzy string insertion",function(){var t=lunr.TokenSet.fromString("abcxx"),r=lunr.TokenSet.fromFuzzyString("abc",2);assert.sameMembers(t.intersect(r).toArray(),["abcxx"])}),test("fuzzy string substitution",function(){var t=lunr.TokenSet.fromString("axx"),r=lunr.TokenSet.fromFuzzyString("abc",2);assert.sameMembers(t.intersect(r).toArray(),["axx"])}),test("fuzzy string deletion",function(){var t=lunr.TokenSet.fromString("a"),r=lunr.TokenSet.fromFuzzyString("abc",2);assert.sameMembers(t.intersect(r).toArray(),["a"])}),test("fuzzy string transpose",function(){var t=lunr.TokenSet.fromString("bca"),r=lunr.TokenSet.fromFuzzyString("abc",2);assert.sameMembers(t.intersect(r).toArray(),["bca"])})})});