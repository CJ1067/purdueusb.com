suite("lunr.tokenizer",function(){var e=function(e){return e.toString()};test("splitting into tokens",function(){var t=lunr.tokenizer("foo bar baz").map(e);assert.sameMembers(["foo","bar","baz"],t)}),test("downcases tokens",function(){var t=lunr.tokenizer("Foo BAR BAZ").map(e);assert.sameMembers(["foo","bar","baz"],t)}),test("array of strings",function(){var t=lunr.tokenizer(["foo","bar","baz"]).map(e);assert.sameMembers(["foo","bar","baz"],t)}),test("undefined is converted to empty string",function(){var t=lunr.tokenizer(["foo",undefined,"baz"]).map(e);assert.sameMembers(["foo","","baz"],t)}),test("null is converted to empty string",function(){var t=lunr.tokenizer(["foo",null,"baz"]).map(e);assert.sameMembers(["foo","","baz"],t)}),test("multiple white space is stripped",function(){var t=lunr.tokenizer("   foo    bar   baz  ").map(e);assert.sameMembers(["foo","bar","baz"],t)}),test("handling null-like arguments",function(){assert.lengthOf(lunr.tokenizer(),0),assert.lengthOf(lunr.tokenizer(undefined),0),assert.lengthOf(lunr.tokenizer(null),0)}),test("converting a date to tokens",function(){var t=new Date(Date.UTC(2013,0,1,12));assert.sameMembers(["tue","jan","01","2013"],lunr.tokenizer(t).slice(0,4).map(e))}),test("converting a number to tokens",function(){assert.equal("41",lunr.tokenizer(41).map(e))}),test("converting a boolean to tokens",function(){assert.equal("false",lunr.tokenizer(!1).map(e))}),test("converting an object to tokens",function(){var t={toString:function(){return"custom object"}};assert.sameMembers(lunr.tokenizer(t).map(e),["custom","object"])}),test("splits strings with hyphens",function(){assert.sameMembers(lunr.tokenizer("foo-bar").map(e),["foo","bar"])}),test("splits strings with hyphens and spaces",function(){assert.sameMembers(lunr.tokenizer("foo - bar").map(e),["foo","bar"])}),test("tracking the token index",function(){var e=lunr.tokenizer("foo bar");assert.equal(e[0].metadata.index,0),assert.equal(e[1].metadata.index,1)}),test("tracking the token position",function(){var e=lunr.tokenizer("foo bar");assert.deepEqual(e[0].metadata.position,[0,3]),assert.deepEqual(e[1].metadata.position,[4,3])}),test("tracking the token position with additional left-hand whitespace",function(){var e=lunr.tokenizer(" foo bar");assert.deepEqual(e[0].metadata.position,[1,3]),assert.deepEqual(e[1].metadata.position,[5,3])}),test("tracking the token position with additional right-hand whitespace",function(){var e=lunr.tokenizer("foo bar ");assert.deepEqual(e[0].metadata.position,[0,3]),assert.deepEqual(e[1].metadata.position,[4,3])}),test("providing additional metadata",function(){var e=lunr.tokenizer("foo bar",{hurp:"durp"});assert.deepEqual(e[0].metadata.hurp,"durp"),assert.deepEqual(e[1].metadata.hurp,"durp")})});