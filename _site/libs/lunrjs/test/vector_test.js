suite("lunr.Vector",function(){var t=function(){var t=new lunr.Vector;return Array.prototype.slice.call(arguments).forEach(function(e,n){t.insert(n,e)}),t};suite("#magnitude",function(){test("calculates magnitude of a vector",function(){var e=t(4,5,6);assert.equal(Math.sqrt(77),e.magnitude())})}),suite("#dot",function(){test("calculates dot product of two vectors",function(){var e=t(1,3,-5),n=t(4,-2,-1);assert.equal(3,e.dot(n))})}),suite("#similarity",function(){test("calculates the similarity between two vectors",function(){var e=t(1,3,-5),n=t(4,-2,-1);assert.approximately(e.similarity(n),.5,.01)}),test("empty vector",function(){var e=new lunr.Vector,n=t(1);assert.equal(0,e.similarity(n)),assert.equal(0,n.similarity(e))}),test("non-overlapping vector",function(){var t=new lunr.Vector([1,1]),e=new lunr.Vector([2,1]);assert.equal(0,t.similarity(e)),assert.equal(0,e.similarity(t))})}),suite("#insert",function(){test("invalidates magnitude cache",function(){var e=t(4,5,6);assert.equal(Math.sqrt(77),e.magnitude()),e.insert(3,7),assert.equal(Math.sqrt(126),e.magnitude())}),test("keeps items in index specified order",function(){var t=new lunr.Vector;t.insert(2,4),t.insert(1,5),t.insert(0,6),assert.deepEqual([6,5,4],t.toArray())}),test("fails when duplicate entry",function(){var e=t(4,5,6);assert.throws(function(){e.insert(0,44)})})}),suite("#upsert",function(){test("invalidates magnitude cache",function(){var e=t(4,5,6);assert.equal(Math.sqrt(77),e.magnitude()),e.upsert(3,7),assert.equal(Math.sqrt(126),e.magnitude())}),test("keeps items in index specified order",function(){var t=new lunr.Vector;t.upsert(2,4),t.upsert(1,5),t.upsert(0,6),assert.deepEqual([6,5,4],t.toArray())}),test("calls fn for value on duplicate",function(){var e=t(4,5,6);e.upsert(0,4,function(t,e){return t+e}),assert.deepEqual([8,5,6],e.toArray())})}),suite("#positionForIndex",function(){var t=new lunr.Vector([1,"a",2,"b",4,"c",7,"d",11,"e"]);test("at the beginning",function(){assert.equal(0,t.positionForIndex(0))}),test("at the end",function(){assert.equal(10,t.positionForIndex(20))}),test("consecutive",function(){assert.equal(4,t.positionForIndex(3))}),test("non-consecutive gap after",function(){assert.equal(6,t.positionForIndex(5))}),test("non-consecutive gap before",function(){assert.equal(6,t.positionForIndex(6))}),test("non-consecutive gave before and after",function(){assert.equal(8,t.positionForIndex(9))}),test("duplicate at the beginning",function(){assert.equal(0,t.positionForIndex(1))}),test("duplicate at the end",function(){assert.equal(8,t.positionForIndex(11))}),test("duplicate consecutive",function(){assert.equal(4,t.positionForIndex(4))})})});